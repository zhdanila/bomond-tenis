// Code generated by go-swagger; DO NOT EDIT.

package courts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostV1BomondVnCourtIDBookHandlerFunc turns a function with the right signature into a post v1 bomond vn court ID book handler
type PostV1BomondVnCourtIDBookHandlerFunc func(PostV1BomondVnCourtIDBookParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1BomondVnCourtIDBookHandlerFunc) Handle(params PostV1BomondVnCourtIDBookParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostV1BomondVnCourtIDBookHandler interface for that can handle valid post v1 bomond vn court ID book params
type PostV1BomondVnCourtIDBookHandler interface {
	Handle(PostV1BomondVnCourtIDBookParams, interface{}) middleware.Responder
}

// NewPostV1BomondVnCourtIDBook creates a new http.Handler for the post v1 bomond vn court ID book operation
func NewPostV1BomondVnCourtIDBook(ctx *middleware.Context, handler PostV1BomondVnCourtIDBookHandler) *PostV1BomondVnCourtIDBook {
	return &PostV1BomondVnCourtIDBook{Context: ctx, Handler: handler}
}

/*
	PostV1BomondVnCourtIDBook swagger:route POST /v1/bomond.vn/{court_id}/book Courts postV1BomondVnCourtIdBook

PostV1BomondVnCourtIDBook post v1 bomond vn court ID book API
*/
type PostV1BomondVnCourtIDBook struct {
	Context *middleware.Context
	Handler PostV1BomondVnCourtIDBookHandler
}

func (o *PostV1BomondVnCourtIDBook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostV1BomondVnCourtIDBookParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostV1BomondVnCourtIDBookBody post v1 bomond vn court ID book body
//
// swagger:model PostV1BomondVnCourtIDBookBody
type PostV1BomondVnCourtIDBookBody struct {

	// date
	// Format: date
	Date strfmt.Date `json:"date,omitempty"`

	// duration
	Duration int64 `json:"duration,omitempty"`

	// time
	Time string `json:"time,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this post v1 bomond vn court ID book body
func (o *PostV1BomondVnCourtIDBookBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV1BomondVnCourtIDBookBody) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(o.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("bookingRequest"+"."+"date", "body", "date", o.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post v1 bomond vn court ID book body based on context it is used
func (o *PostV1BomondVnCourtIDBookBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostV1BomondVnCourtIDBookBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV1BomondVnCourtIDBookBody) UnmarshalBinary(b []byte) error {
	var res PostV1BomondVnCourtIDBookBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
